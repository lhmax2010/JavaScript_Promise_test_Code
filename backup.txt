- Front.js shakaDemo.Front.createAssetCardFor_()    ----    这里其实只是调用的时候注册了个addButon触发消息函数，运行的时候会走到这个触发消息函数里面
		- demo/main.js shakaDemo.Main.loadAsset()
			- lib/player.js shaka.Player.setVideoContainer()    ----    选择使用browser自带的VTTCue还是用shakaplayer UI来显示字幕或者caption信息
			- lib/player.js shaka.Player.load()    ----    将asset信息导入到walker routine内部，然后开始运作整体流程
      
      
      
      
- /lib/routing/walker.js shaka.routing.Walker.doOneThing_()
	-/lib/routing/walker.js shaka.routing.Walker.tryNewRoute_()
	-/lib/routing/walker.js shaka.routing.Walker.takeNextStep_() 
		-/lib/player.js shaka.routing.Walker.Implementation.getNext()
		 	-/lib/player.js shaka.routing.Walker.Implementation.getNextStep_()
		-/lib/player.js shaka.routing.Walker.Implementation.enterNode()
			-/lib/player.js shaka.Player.action()

onUnload_()
    -1 /lib/player.js 设置loadMode_为NOT_LOADED
    -2 /lib/player.js 执行注册的cleanup Callback
    -3 /lib/player.js dispatchEvent(this.makeEvent_(shaka.Player.EventName.Unloading))    ----    上抛Unloading消息
    -4 /lib/player.js 停止监听MediaoElement的 'loadedmetadata'，'playing'，'pause'，'ended'，'ratechange'消息
    -5 /lib/media/playhead_observer.js shaka.media.PlayheadObserverManager.release()
        -6 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止每4s执行一次的observer触发，一般都是发送消息，类似心跳检测的一种事件触发机制
    -7 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止每0.25s执行一次的buffering state update操作
    -8 /lib/dash/dash_parser.js shaka.dash.DashParser.stop()    ----    因为这里我测试的是dash流，其他流对应的parser不一样。
        -9 /lib/media/segment_index.js shaka.media.SegmentIndex.release()    ----    释放dash的segment Index存放的数据
            -10 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止每segment update时间执行一次的segment update定时器
        -11 /lib/util/periods.js shaka.util.PeriodCombiner.release()    ----    释放存储的multi-period stream的segment index信息
            -12 /lib/media/segment_index.js shaka.media.MetaSegmentIndex.release()
        -13 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止manifest更新的定时器
        -14 /lib/util/operation_manager.js shaka.util.OperationManager.destroy()    ----    这个主要用与让operation执行完成之后再移除这个操作，类似一个线程池
    -15 /lib/abr/simple_abr_manager.js shaka.abr.SimpleAbrManager.stop()
    -16 /lib/media/streaming_engine.js shaka.media.StreamingEngine.destroy()
        -17 /lib/util/destroyer.js shaka.util.Destroyer.destroy()    ----    异步执行destroy操作
            -18 /lib/media/streaming_engine.js shaka.media.StreamingEngine.doDestroy_()
                -19 /lib/media/streaming_engine.js shaka.media.StreamingEngine.cancelUpdate()    ----    停止StreamingEngine的update timer
    -20 /lib/media/play_rate_controller.js shaka.media.PlayRateController.release()
        -21 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止rate change的情况下，对mediaSource的timestamp增长修正操作
    -22 /lib/media/playhead.js shaka.media.MediaSourcePlayhead.release()
        -23 /lib/media/video_wrapper.js shaka.media.VideoWrapper.release()
            -24 /lib/util/event_manager.js shaka.util.EventManager.release()
                -25 /lib/media/video_wrapper.js shaka.media.VideoWrapper.PlayheadMover.release()
                    -26 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止每隔100ms对mediaElement的时间的修正，该操作主要作用与seek操作。
        -27 /lib/media/gap_jumping_controller.js shaka.media.GapJumpingController.release()
            -28 /lib/util/event_manager.js shaka.util.EventManager.release()
                -29 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止每隔0.25s执行一次的对流有gap的jump操作的计时器
                -30 /lib/media/stall_detector.js shaka.media.StallDetector.release()    ----    这个其实就是个delay detect的模块，主要用于探测流出现delay或者gap的时候，进行jump追上的问题。
    -31 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.destroy()
        -32 /lib/util/destroyer.js shaka.util.Destroyer.destroy()
            -33 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.doDestroy_()
                -34 /lib/media/media_source_engine.js 首先等待所有正在执行的操作执行完，未执行的操作，直接reject掉。
                    -35 /lib/text/text_engine.js shaka.text.TextEngine.destroy()    ----   将TextEngine的destroy操作也放进clean队列执行
                    -36 /lib/text/simple_text_displayer.js shaka.text.SimpleTextDisplayer.destory()
                        -37 /lib/text/simple_text_displayer.js shaka.text.SimpleTextDisplayer.removeWhere_()    ----    将textTracker的状态设置为disable，然后清楚掉trak里面的所有的数据。
        -38 /lib/media/transmuxer.js shaka.media.Transmuxer.destroy()    ----    这里用的实际上是/node_modules/mux.js/mp4/transmuxer.js这个muxer
        -39 mediaSource的removeAttribute函数，主要是停止接收数据的。
    -40 /lib/ads/ad_manager.js shaka.ads.AdManager.onAssetUnload()
        -41 /lib/ads/client_side_ad_manager.js shaka.ads.ClientSideAdManager.stop()
        -42 触发AD_STOPPED, 因为接收这个event的代码太多了,主要用于关闭display和ui的显示的,在这里就不描述了,详情可以追下代码
    -43 remove MediaElement所有的track nodes
    -44 /lib/media/drm_engine.js shaka.media.DrmEngine.destroy()
        -45 /lib/util/destroyer.js shaka.util.Destroyer.destroy()
            -46 /lib/media/drm_engine.js shaka.media.DrmEngine.destroyNow_()
            -47 /lib/util/event_manager.js shaka.util.EventManager.release()
            -48 /lib/media/drm_engine.js shaka.media.DrmEngine.areAllSessionsLoaded_()    ----   停止接收所有的sessions操作
            -49 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止sessions的过期时间的更新操作，但是因为dash里面还没实现，所以这个timer没有实际用处
            -50 /lib/util/timer.js shaka.util.Timer.stop()    ----    停止所有keys过期的检查timer
            -51 /lib/media/drm_engine.js shaka.media.DrmEngine.closeOpenSessions_()
                -52 /lib/media/drm_engine.js shaka.media.DrmEngine.closeSession_()
                    -53 /lib/polyfill/patchedmediakeys_webkit.js shaka.polyfill.PatchedMediaKeysWebkit.MediaKeySession.close()
                        -54 调用EME的cancelKeyRequest()    ----    这个地方因为没有DRM测试过，类的对应不一定准确
            -55 MediaElement的setMediaKeys为NULL
    -56 /lib/player.js shaka.Player.updateBufferState_()    ----     将buffer state更新下，并发送buffering通知下。
    
    
onInitializeMediaSourceEngine_()
    -1 /lib/media/closed_caption_parser.js shaka.media.ClosedCaptionParser.constructor()
        -2 /lib/cea/mp4_cea_parser.js shaka.cea.Mp4CeaParser.constructor()
            -3 /lib/cea/sei_processor.js shaka.cea.SeiProcessor.constructor()
        -4 /lib/cea/cea_decoder.js shaka.cea.CeaDecoder.constructor()
            -5 /lib/cea/dtvcc_packet_builder.js shaka.cea.DtvccPacketBuilder.constructor()
            -6 /lib/cea/cea608_data_channel.js shaka.cea.Cea608DataChannel.contructor()
                -7 /lib/cea/cea608_memory.js shaka.cea.Cea608Memory.constructor()
                    -8 /lib/cea/cea608_memory.js shaka.cea.Cea608Memory.reset()
                        -9 /lib/cea/cea608_memory.js shaka.cea.Cea608Memory.resetAllRows()
                            -10 /lib/cea/cea608_memory.js shaka.cea.Cea608Memory.resetRows()
    -11 /lib/util/functional.js shaka.util.Functional.callFactory()
		-12 /lib/player.js shaka.Player.textDisPlayerFactory()    ----    在defaultConfig_()函数中定义的，主要用于创建textDisplay对象
			-13 /lib/text/simple_text_displayer.js shaka.text.SimpleTextDisplayer.constructor()
				-14 将Media Element里面的track都disable掉
				-15 调用MediaElement的addTextTrack函数，增加一个subtitles track,label为Shaka Player TextTrack
				-16 将texttrack 模式设置为hidden
    -17 /lib/player.js shaka.Player.createStreamingEngine()
        -18 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.constructor()
			-19 创建一个MediaSource对象
			-20 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.createMediaSource()
				-21 监听一次sourceopen消息，当消息到达时，触发onSourceOpen_函数，这个函数主要是释放掉文件URL的内存。
				-22 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.createObjectURL    ----    这个其实就是window.URL.createObjectURL，主要就是根据创建的MediaSource做个URL，然后传给MediaElement的src使用。
    -23 /lib/media/media_source_engine.js shaka.media.MediaSourceEngine.open()
    
    
onInitializeParser_()
    -1 /lib/media/manifest_parser.js shaka.media.ManifestParser.getFactory()    ----    如何注册Manifest factory将在后面的PPT详述
        -2 从shaka.media.ManifestParser.parsersByMime的数组中根据MIME Type来找寻对象，其中的对象必须是通过MIME Type注册进来的
        -3 /lib/media/manifest_parser.js shaka.media.ManifestParser.getExtension()    ----    就是获取URL的末尾字符串，用来判断是什么流，比如"mpd"/"m3u8"
        -4 从shaka.media.ManifestParser.parserByExtension的数组中根据尾端字符串来找寻对象，其中的对象必须是通过末尾字符串注册进来的
        -5 /lib/media/manifest_parser.js shaka.media.ManifestParser.getMimeType()
            -6 /lib/net/networking_engine.js shaka.net.NetworkingEngine.makeRequest()    ----    做一个向URL Get的一个http request
            -7 /lib/net/networking_engine.js shaka.net.NetworkingEngine.request()
                -8 /lib/net/networking_engine.js shaka.net.NetworkingEngine.NumBytesRemainingClass.constructor()    ----    这个结构体主要是在下载过程中存储剩余多少字节还没有下载
                -9 /lib/net/networking_engine.js shaka.net.NetworkingEngine.defaultRetryParameters()
                    -10 /lib/net/backoff.js shaka.net.Backoff.defaultRetryParameters()    ----    这里其实就是做个default的retry parameter，结构为{maxAttempts, baseDelay, backoffFactro, fuzzFactor, timeout}
                -11 /lib/util/object_utils.js shaka.util.ObjectUtils.cloneObject()    ----    其实就是个深拷贝，因为在JavaScript中，直接=都是浅拷贝，所以需要写个深拷贝函数来实现深拷贝
                -12 /lib/net/networking_engine.js shaka.net.NetworkingEngine.filterRequest_()
                    -13 /lib/util/abortable_operation.js shaka.util.AbortableOperation.completed()    ----    创建一个成功的可被打断的Promise对象，AbortableOperation是个Promise函数，在执行过程中，可以设置它的aborted_参数，从而打断当前操作
                    -14 /lib/util/abortable_operation.js shaka.util.AbortableOperation.chain()    ----    将放入的callback做成一个Promise函数，并且在执行callback之前查看下是否被abort了
                        -15 /lib/util/abortable_operation.js shaka.util.AbortableOperation.wrapChainCallback_()    ----    真正执行callback的函数，里面会根据callback是否发生error来判断是否需要走Error流程
                            -16 /lib/net/networking_engine.js 执行requestFilter，这个是由registerRequestFilter注册进来的，一般都是外部对http request内部的头部或者body的一些修正或者添加操作
                    -17 /lib/util/abortable_operation.js shaka.util.AbortableOperation.chain()    ----    这一步主要是对error的处理，如果在运行过程中出现error，该操作会捕捉error并且上抛上去
                -18 /lib/util/abortable_operation.js shaka.util.AbortableOperation.chain()
                    -19 /lib/net/networking_engine.js shaka.net.NetworkingEngine.makeRequestWithRetry_()    ----    执行request的操作
                        -20 /lib/net/backoff.js shaka.net.Backoff.constructor()    ----    这个主要是用来存储一些下载信息的，防止单路下载失败的时候，重新下载使用
                            -21 /lib/net/backoff.js shaka.net.Backoff.defaultRetryParameters()
                        -22 /lib/net/networking_engine.js shaka.net.NetworkingEngine.send_()
                            -23 uri.getScheme()    ----    这里主要是通过goog.uri库来获取uri所对应的协议，但并不是一定成功
                            -24 /lib/net/networking_engine.js shaka.net.NetworkingEngine.getLocationProtocol_()    ----    这里是通过Web Browser的接口来获取协议
                            -25 uri.setScheme()    ----    这里主要是通过获取到的协议，重做URL
                            -26 根据协议获取存放在shaka.net.NetworkingEngine.schemes_中的对象，，其中对象如何注册，会在后面的PPT详述
                            -27 /lib/util/abortable_operation.js shaka.util.AbortableOperation.notAbortable()    ----    这里其实就是个正常的promise，不具备过程中打断操作
                            -28 /lib/util/abortable_operation.js shaka.util.AbortableOperation.chain()
                                -29 plugin()    ----    根据获取的协议对象执行下载操作，这里一般都是FETCH居多
                                -30 /lib/net/http_fetch_plugin.js shaka.net.HttpFetchPlugin.parse()
                                    -31 /lib/net/http_fetch_plugin.js shaka.net.HttpFetchPlugin.Headers_()    ----    这里其实调用的就是window.Headers(),也就是FETCH创建Headers对象
                                    -32 headers.append    ----    这里就是将之前对headers修正的数据都加入到现在的head里面
                                    -33 /lib/net/http_fetch_plugin.js shaka.net.HttpFetchPlugin.AbortController_()    ----    这里其实调用的是window.AbortController,也就是个controller，主要是对fetch过程的abort error进行监听的。
                                    -34 /lib/net/http_fetch_plugin.js shaka.net.HttpFetchPlugin.request_()
                                        -35 /lib/net/http_fetch_plugin.js shaka.net.HttpFetchPlugin.fetch_()    ----    这里其实调用的是window.fetch,也就是浏览器自带的fetch函数
                                        -36 ReadableStream.getReader()    ----    该操作会将流锁定，直到将流释放后，才可以继续使用
                                        -37 ReadableStream.ReadableStream()    ----    开始数据读取
                                        -37 ReadableStream.read()    ----    将数据从流里面copy出来
                                        -38 streamDataCallback(readObj.value)    ----    这里注意下，这里注册的是执行onProgressUpdated_,这个实际实现的地方是player.js里面的createNetworkingEngine里面，但是因为在创建这个的时候abrManager还没有创建，所以没什么结果
                                        -39 ReadableByteStreamController.enqueue()    ----    这里是对数据没有读完，再继续读取,之后调用了push()继续读取数据
                                    -40 /lib/net/http_plugin_utils.js shaka.net.HttpPluginUtils.makeResponse()    ----    成功读取数据后，制作responce,结构体为{uri, originalUri, data, headers, fromCache}
                                    -41 /lib/util/abortable_operation.js shaka.util.AbortableOperation.constructor()    ----    因为request_是个async函数，所以加个可被打断操作
                                    -42 创建个timer，防范下载超时
                -43 /lib/net/networking_engine.js shaka.net.NetworkingEngine.filterResponse_()
                    -44 /lib/util/abortable_operation.js shaka.util.AbortableOperation.completed()
                        -45 这边执行的是通过registerResponseFilter注册到responseFilters_的操作，这里一般都是对responce信息的读取，来满足一些需求
                -46 如果在内部的onProgressUpdated_没有执行成功，则会再执行一次
            -47 从头部获取content-type，来获得MIME Type
        -48 从shaka.media.ManifestParser.parsersByMime的数组中根据MIME Type来找寻对象，其中的对象必须是通过MIME Type注册进来的
    -49 /lib/util/functional.js shaka.util.Functional.callFactory()
        -50 /lib/dash/dash_parser.js shaka.dash.DashParser.constructor()    ----    这里我是以dash流为例写的
            -51 /lib/util/periods.js shaka.util.PeriodCombiner.constructor()
            -52 /lib/abr/ewma.js shaka.abr.Ewma.constructor()
            -53 /lib/util/timer.js shaka.util.Timer.constructor()    ----    这里是启动了一个定时进行onUpdate_()的定时器，该函数主要就是执行定时更新manifest
            -54 /lib/util/operation_manager.js shaka.util.OperationManager.constructor()
    -55 /lib/dash/dash_parser.js shaka.dash.DashParser.configure()
